import pickle
import numpy as np
from pathlib import Path
import random

# 设置参数
PKL_PATH = "/home/malacca/3DLLM/data/skengen_data/train.pkl"  # pkl文件路径

def load_pkl(file_path):
    """加载pkl文件"""
    with open(file_path, 'rb') as f:
        data = pickle.load(f)
    return data

def analyze_data(data):
    """分析数据集的基本信息"""
    print(f"\n{'='*20} 数据集基本信息 {'='*20}")
    print(f"样本总数: {len(data)}")
    
    # 分析每个样本的操作步骤数
    steps = [sample['num_se'] for sample in data]
    print(f"操作步骤统计:")
    print(f"  - 平均步骤数: {np.mean(steps):.2f}")
    print(f"  - 最大步骤数: {np.max(steps)}")
    print(f"  - 最小步骤数: {np.min(steps)}")
    print(f"  - 总步骤数: {sum(steps)}")

def print_sketch_info(se_xy, se_cmd, se_pix, step_idx):
    """打印草图信息"""
    print(f"\n  草图信息 (Step {step_idx + 1}):")
    
    # 处理坐标数据
    xy_coords = np.array(se_xy[step_idx])
    if len(xy_coords) > 0:
        x_coords = xy_coords[::2]
        y_coords = xy_coords[1::2]
        print(f"  - 坐标点数量: {len(x_coords)}")
        print(f"  - 坐标范围: X[{np.min(x_coords):.2f}, {np.max(x_coords):.2f}], "
              f"Y[{np.min(y_coords):.2f}, {np.max(y_coords):.2f}]")
    else:
        print("  - 无坐标点")
    
    # 处理命令序列
    cmd_seq = np.array(se_cmd[step_idx])
    if len(cmd_seq) > 0:
        print(f"  - 命令序列: {cmd_seq.tolist()}")
        print(f"  - 命令数量: {len(cmd_seq)}")
    else:
        print("  - 无命令序列")
    
    # 处理像素坐标
    pix_coords = np.array(se_pix[step_idx])
    print(f"  - 像素坐标: 形状{pix_coords.shape}")

def print_extrude_info(ext_params):
    """打印挤出参数信息"""
    ext_params = np.array(ext_params)
    
    # 根据参数在数组中的位置解析含义
    extrude_value = ext_params[0]      # 挤出值
    transform = ext_params[1:4]        # 变换参数 (x,y,z)
    rotation = ext_params[4:7]         # 旋转参数 (rx,ry,rz)
    op_type = int(ext_params[-4])      # 操作类型
    scale = ext_params[-3]             # 缩放因子
    offset = ext_params[-3:-1]         # 偏移量
    
    print(f"  挤出参数:")
    print(f"  - 挤出值: {extrude_value:.4f}")
    print(f"  - 变换参数 (x,y,z): [{transform[0]:.4f}, {transform[1]:.4f}, {transform[2]:.4f}]")
    print(f"  - 旋转参数 (rx,ry,rz): [{rotation[0]:.4f}, {rotation[1]:.4f}, {rotation[2]:.4f}]")
    print(f"  - 操作类型: {op_type}")
    print(f"  - 缩放因子: {scale:.4f}")
    print(f"  - 偏移量: [{offset[0]:.4f}, {offset[1]:.4f}]")
    print(f"  - 原始参数数组: {ext_params.tolist()}")

def print_sample_info(sample, idx):
    """打印单个样本的详细信息"""
    print(f"\n{'='*20} 样本 {idx} 详细信息 {'='*20}")
    print(f"模型名称: {sample['name']}")
    print(f"总体信息:")
    print(f"  - 操作步骤数: {sample['num_se']}")
    print(f"  - 坐标数量: {sample['len_xy']}")
    print(f"  - 命令数量: {sample['len_cmd']}")
    print(f"  - 挤出参数数量: {sample['len_ext']}")
    
    # 打印每个操作步骤的详细信息
    for step_idx in range(sample['num_se']):
        print(f"\n[步骤 {step_idx + 1}/{sample['num_se']}]")
        # 打印草图信息
        print_sketch_info(sample['se_xy'], sample['se_cmd'], sample['se_pix'], step_idx)
        # 打印挤出参数
        print_extrude_info(sample['se_ext'][step_idx])

def main():
    # 加载数据
    print(f"正在加载文件: {PKL_PATH}")
    data = load_pkl(PKL_PATH)
    
    # 分析数据集基本信息
    analyze_data(data)
    
    # 随机选择5个样本进行详细分析
    sample_indices = random.sample(range(len(data)), min(5, len(data)))
    for idx in sample_indices:
        print_sample_info(data[idx], idx)

if __name__ == "__main__":
    main()